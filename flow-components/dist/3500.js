"use strict";exports.id=3500,exports.ids=[3500],exports.modules={33500:(e,s,o)=>{o.r(s),o.d(s,{fromSSO:()=>p,isSsoProfile:()=>i,validateSsoProfile:()=>S});var n=o(20742),t=o(43340);const i=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),r="To refresh this SSO session run 'aws sso login' with the corresponding profile.",a={},c=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.rh(`Token is expired. ${r}`,!1)},l=(e,s,o=!1)=>{if(void 0===s)throw new n.rh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${r}`,!1)};var f=o(57147);const{writeFile:w}=f.promises,d=new Date(0),h=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers","fromSso");const s=await(0,t.MX)(e),i=(0,t.Jl)(e),f=s[i];if(!f)throw new n.rh(`Profile '${i}' could not be found in shared credentials file.`,!1);if(!f.sso_session)throw new n.rh(`Profile '${i}' is missing required property 'sso_session'.`);const h=f.sso_session,g=(await(0,t.G)(e))[h];if(!g)throw new n.rh(`Sso session '${h}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!g[e])throw new n.rh(`Sso session '${h}' is missing required property '${e}'.`,!1);g.sso_start_url;const u=g.sso_region;let S;try{S=await(0,t.gH)(h)}catch(e){throw new n.rh(`The SSO session token associated with profile=${i} was not found or is invalid. ${r}`,!1)}l("accessToken",S.accessToken),l("expiresAt",S.expiresAt);const{accessToken:p,expiresAt:_}=S,m={token:p,expiration:new Date(_)};if(m.expiration.getTime()-Date.now()>3e5)return m;if(Date.now()-d.getTime()<3e4)return c(m),m;l("clientId",S.clientId,!0),l("clientSecret",S.clientSecret,!0),l("refreshToken",S.refreshToken,!0);try{d.setTime(Date.now());const e=await(async(e,s)=>{const{CreateTokenCommand:n}=await o.e(8755).then(o.bind(o,18755)),t=await(async e=>{const{SSOOIDCClient:s}=await o.e(8755).then(o.bind(o,18755));if(a[e])return a[e];const n=new s({region:e});return a[e]=n,n})(s);return t.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(S,u);l("accessToken",e.accessToken),l("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const o=(0,t.Py)(e),n=JSON.stringify(s,null,2);return w(o,n)})(h,{...S,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return c(m),m}},g=!1,u=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:r,ssoRoleName:a,ssoClient:c,clientConfig:l,profile:f})=>{let w;const d="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await h({profile:f})();w={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n.mV(e.message,g)}else try{w=await(0,t.gH)(e)}catch(e){throw new n.mV(`The SSO session associated with this profile is invalid. ${d}`,g)}if(new Date(w.expiresAt).getTime()-Date.now()<=0)throw new n.mV(`The SSO session associated with this profile has expired. ${d}`,g);const{accessToken:u}=w,{SSOClient:S,GetRoleCredentialsCommand:p}=await o.e(3810).then(o.bind(o,73810)),_=c||new S(Object.assign({},l??{},{region:l?.region??r}));let m;try{m=await _.send(new p({accountId:i,roleName:a,accessToken:u}))}catch(e){throw n.mV.from(e,g)}const{roleCredentials:{accessKeyId:T,secretAccessKey:k,sessionToken:y,expiration:x,credentialScope:O}={}}=m;if(!(T&&k&&y&&x))throw new n.mV("SSO returns an invalid temporary credential.",g);return{accessKeyId:T,secretAccessKey:k,sessionToken:y,expiration:new Date(x),credentialScope:O}},S=e=>{const{sso_start_url:s,sso_account_id:o,sso_region:t,sso_role_name:i}=e;if(!(s&&o&&t&&i))throw new n.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return e},p=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso","fromSSO");const{ssoStartUrl:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:a,ssoSession:c}=e,{ssoClient:l}=e,f=(0,t.Jl)(e);if(s||o||r||a||c){if(s&&o&&r&&a)return u({ssoStartUrl:s,ssoSession:c,ssoAccountId:o,ssoRegion:r,ssoRoleName:a,ssoClient:l,clientConfig:e.clientConfig,profile:f});throw new n.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"')}{const o=(await(0,t.MX)(e))[f];if(!o)throw new n.mV(`Profile ${f} was not found.`);if(!i(o))throw new n.mV(`Profile ${f} is not configured with SSO credentials.`);if(o?.sso_session){const i=(await(0,t.G)(e))[o.sso_session],a=` configurations in profile ${f} and sso-session ${o.sso_session}`;if(r&&r!==i.sso_region)throw new n.mV("Conflicting SSO region"+a,!1);if(s&&s!==i.sso_start_url)throw new n.mV("Conflicting SSO start_url"+a,!1);o.sso_region=i.sso_region,o.sso_start_url=i.sso_start_url}const{sso_start_url:a,sso_account_id:c,sso_region:w,sso_role_name:d,sso_session:h}=S(o);return u({ssoStartUrl:a,ssoSession:h,ssoAccountId:c,ssoRegion:w,ssoRoleName:d,ssoClient:l,clientConfig:e.clientConfig,profile:f})}}}};